/*
 * Copyright (c) 2021 Pete Johanson and Tom Barnes
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


#define TBLE_ORTHO   true
// #define TBLE_MIT     true
// #define TBLE_DUAL_2U true

#define QWE_L 0
#define COL_L 1
#define NAV_L 2
#define OTH_L 3
#define NUM_L 4
#define SYM_L 5
#define FUN_L 6

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };
bl: &bootloader {};

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    #define COMBO(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <50>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
  };

&mt {
  flavor = "tap-preferred";
  //tapping_term_ms = <200>;
};

/  {
    combos {
        compatible = "zmk,combos";

          COMBO(escape, &kp ESCAPE, 2 4)
          COMBO(backspace, &kp BACKSPACE, 14 15)
          COMBO(quote, &kp APOSTROPHE, 31 32)
          COMBO(minus, &kp MINUS, 26 27)
          COMBO(less, &kp LESS_THAN, 20 21)
          COMBO(more, &kp GREATER_THAN, 22 23)
          COMBO(score, &kp UNDER, 33 34)
          COMBO(slash, &kp BACKSLASH, 11 12)
          COMBO(btc, &bt BT_CLR, 1 36)


};

    keymap {
        compatible = "zmk,keymap";
        qwerty_layer {
            label = "Qwerty";
            bindings = <
 &kp Q       &kp W      &kp E       &kp R          &kp T          &trans     &trans       &kp Y            &kp U          &kp I       &kp O      &kp P        
 &mt LCTRL A &kpS       &kp D       &kp F          &kp G          &trans     &trans       &kp H            &kp J          &kp K       &kp L      &mt RCTRL SEMI
 &mt LSHFT Z &kp X      &kp C       &kp V          &kp B          &trans     &trans       &kp N            &kp M          &kp COMMA   &kp DOT    &mt RSHFT FSLH  

#ifdef TBLE_DUAL_2U
                       &bl         &lt NAV_L TAB       &lt OTH_L RET                    &lt NUM_L SPACE               &lt SYM_L BKSP &lt FUN_L C_MUTE
#elif defined(TBLE_MIT)
                       &bl         &lt NAV_L TAB  &lt OTH_L RET              &none                   &lt NUM_L SPACE  &lt SYM_L BKSP &lt FUN_L C_MUTE
#else
                       &mt LGUI ESC &mt LALT RED  &lt OTH_L SPACE         &none      &none             &lt NUM_L SPACE  &lt SYM_L LSFT &lt FUN_L TAB
#endif
            >;
        };

        colemak_dhm_layer {
            label = "Colemak-DHm";
            bindings = <
 &kp Q      &kp W      &kp F       &kp P          &kp B          &kp C_VOL_UP     &kp C_BRI_UP       &kp J            &kp L          &kp U       &kp Y      &kp QUOT
 &hm LGUI A &hm LALT R &hm LCTRL S &hm LSHFT T    &kp G          &kp C_VOL_DN     &kp C_BRI_DN       &kp M            &hm RSHFT N    &hm RCTRL E &hm LALT I &hm LGUI O
 &kp Z      &kp X      &kp C       &kp D          &kp V          &kp C_PLAY_PAUSE &kp C_MUTE         &kp K            &kp H          &kp COMMA   &kp DOT    &kp FSLH     
#ifdef TBLE_DUAL_2U
                       &bl         &lt NAV_L TAB       &lt OTH_L RET                    &lt NUM_L SPACE               &lt SYM_L BKSP &lt FUN_L C_MUTE
#elif defined(TBLE_MIT)
                       &bl         &lt NAV_L TAB  &lt OTH_L RET              &none                   &lt NUM_L SPACE  &lt SYM_L BKSP &lt FUN_L C_MUTE
#else
                       &bl         &lt NAV_L TAB  &lt OTH_L RET         &none      &none             &lt NUM_L SPACE  &lt SYM_L BKSP &lt FUN_L C_MUTE
#endif
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&trans    &trans     &trans     &trans      &trans          &trans       &trans    &trans  &trans         &trans      &trans     &trans       
&trans    &trans     &trans     &trans      &trans          &trans       &trans    &trans  &kp LARW       &kp DARW    &kp UARW   &kp RARW     
&trans    &trans     &trans     &trans      &trans          &trans       &trans    &trans  &kp HOME       &kp PG_DN   &kp PG_UP  &kp END      
#ifdef TBLE_DUAL_2U
                     &trans     &trans              &trans                    &kp ESC      &kp DEL        &trans
#elif defined(TBLE_MIT)
                     &trans     &trans      &trans                &none             &kp ESC      &kp DEL        &trans
#else
                     &trans     &trans      &trans          &none        &none      &kp ESC      &kp DEL        &trans
#endif
            >;
        };

        other_layer {
            label = "Other";
            bindings = <
&trans    &trans     &trans     &trans      &trans          &trans       &trans           &trans         &trans       &trans       &trans       &bt BT_CLR
&trans    &trans     &trans     &trans      &trans          &trans       &trans           &trans         &trans       &kp C_VOL_DN &kp C_VOL_UP &trans 
&trans    &trans     &trans     &trans      &trans          &trans       &trans           &bt BT(0)      &bt BT(1)    &bt BT(2)    &bt BT(3)    &bt BT(4)    
#ifdef TBLE_DUAL_2U
                     &trans     &trans              &trans                    &trans                     &trans       &trans
#elif defined(TBLE_MIT)
                     &trans     &trans      &trans                &none                   &trans         &trans       &trans
#else
                     &trans     &trans      &trans          &none        &none            &trans         &trans       &trans
#endif
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&kp LBKT   &kp N7     &kp N8      &kp N9    &kp RBKT    &kp C_PREV     &trans    &trans         &trans       &trans       &trans     &trans
&kp SEMI   &kp N4     &kp N5      &kp N6    &kp EQUAL   &kp C_NEXT     &trans    &trans         &trans       &trans       &trans     &trans
&kp GRAVE  &kp N1     &kp N2      &kp N3    &kp BSLH    &trans         &trans    &trans         &trans       &trans       &trans     &trans
#ifdef TBLE_DUAL_2U
                     &trans     &kp N0              &kp MINUS                 &trans            &trans         &trans
#elif defined(TBLE_MIT)
                     &trans     &kp N0      &kp MINUS           &none            &kp ESC        &kp DEL      &trans
#else
                     &trans     &kp N0      &kp MINUS    &none         &none     &kp ESC        &kp DEL      &trans
#endif
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&kp LBRC   &kp LS(N7) &kp LS(N8)  &kp LS(N9)   &kp RBRC     &trans    &trans     &trans    &trans       &trans       &trans     &trans
&kp COLON  &kp LS(N4) &kp LS(N5)  &kp LS(N6)   &kp PLUS     &trans    &trans     &trans    &trans       &trans       &trans     &trans
&kp TILDE  &kp LS(N1) &kp LS(N2)  &kp LS(N3)   &kp LS(BSLH) &trans    &trans     &trans    &trans       &trans       &trans     &trans
#ifdef TBLE_DUAL_2U
                      &trans      &kp LS(N0)          &kp UNDER              &trans        &trans       &trans
#elif defined(TBLE_MIT)
                      &trans      &kp LS(N0)   &kp UNDER         &none           &trans    &trans       &trans
#else
                      &trans      &kp LS(N0)   &kp UNDER    &none     &none      &trans    &trans       &trans
#endif
            >;
        };

        fun_layer {
            label = "Fun";
            bindings = <
&kp F12     &kp F7     &kp F8      &trans    &kp F9     &kp PSCRN         &trans    &trans     &trans      &trans     &to QWE_L    &to COL_L
&kp F11     &kp F4     &kp F5      &trans    &kp F6     &kp SLCK          &trans    &trans     &trans      &trans     &trans       &trans
&kp F10     &kp F1     &kp F2      &trans    &kp F3     &kp PAUSE_BREAK   &trans    &trans     &trans      &trans     &trans       &trans
#ifdef TBLE_DUAL_2U
                       &trans      &trans          &trans                      &trans          &trans       &trans
#elif defined(TBLE_MIT)
                       &trans     &trans     &trans                &none            &trans     &trans       &trans
#else
                       &trans     &trans     &trans       &none         &none       &trans     &trans       &trans
#endif
            >;
        };
    };
};

